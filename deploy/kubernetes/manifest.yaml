---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs-media
  namespace: media
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-nfs-csi"
spec:
  storageClassName: freenas-nfs-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 500Gi
  volumeName: pvc-643a415e-bc02-4d98-b454-21e45ed0c5d6

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-jellyfin-config
  namespace: media
  labels:
    app: jellyfin
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-iscsi-csi"
spec:
  storageClassName: freenas-iscsi-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  volumeName: pvc-ca85bfba-18eb-4c87-a398-dd5c9f179bfa

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-prowlarr-config
  namespace: media
  labels:
    app: prowlarr
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-iscsi-csi"
spec:
  storageClassName: freenas-iscsi-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  volumeName: pvc-2be70d06-3f0a-48e8-9bf0-56441b0c77fb

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-bazarr-config
  namespace: media
  labels:
    app: bazarr
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-iscsi-csi"
spec:
  storageClassName: freenas-iscsi-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: pvc-19db5bc4-e5ec-4cef-af0c-58aadae064ea

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-sonarr-config
  namespace: media
  labels:
    app: sonarr
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-iscsi-csi"
spec:
  storageClassName: freenas-iscsi-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: pvc-d5dbce59-f98e-4c4d-8539-bd643f60cbb3

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-radarr-config
  namespace: media
  labels:
    app: radarr
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-iscsi-csi"
spec:
  storageClassName: freenas-iscsi-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: pvc-74f2f49f-04b7-4427-a9bd-61d4b83c5d3c

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: jellyfin
  namespace: media
  labels:
    app: jellyfin
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: jellyfin
  template:
    metadata:
      labels:
        app: jellyfin
    spec:
      containers:
        - name: jellyfin
          image: jellyfin/jellyfin:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8096
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: http
          readinessProbe:
            tcpSocket:
              port: http
          volumeMounts:
            - name: config
              mountPath: /config
            - name: media
              mountPath: /media
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: pvc-iscsi-jellyfin-config
        - name: media
          persistentVolumeClaim:
            claimName: pvc-nfs-media

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: prowlarr
  namespace: media
  labels:
    app: prowlarr
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: prowlarr
  template:
    metadata:
      labels:
        app: prowlarr
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: prowlarr
          image: lscr.io/linuxserver/prowlarr:amd64-nightly
          imagePullPolicy: IfNotPresent
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: "TZ"
              value: "Europe/Amsterdam"
          ports:
            - name: http
              containerPort: 9696
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 9696
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 9696
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 9696
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          volumeMounts:
            - name: prowlarr-config
              mountPath: /config
      volumes:
        - name: prowlarr-config
          persistentVolumeClaim:
            claimName: pvc-iscsi-prowlarr-config

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: bazarr
  namespace: media
  labels:
    app: bazarr
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: bazarr
  template:
    metadata:
      labels:
        app: bazarr
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: bazarr
          image: lscr.io/linuxserver/bazarr:amd64-latest
          imagePullPolicy: IfNotPresent
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: "TZ"
              value: "Europe/Amsterdam"
          ports:
            - name: http
              containerPort: 6767
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 6767
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 6767
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 6767
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          volumeMounts:
            - name: bazarr-config
              mountPath: /config
      volumes:
        - name: media
          persistentVolumeClaim:
            claimName: pvc-nfs-media
        - name: bazarr-config
          persistentVolumeClaim:
            claimName: pvc-iscsi-bazarr-config

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: sonarr
  namespace: media
  labels:
    app: sonarr
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: sonarr
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: sonarr
          image: linuxserver/sonarr:amd64-latest
          imagePullPolicy: IfNotPresent
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: "TZ"
              value: "Europe/Amsterdam"
          ports:
            - name: http
              containerPort: 8989
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /usr/bin/env
                - bash
                - -c
                - curl --fail localhost:8989/api/v3/system/status?apiKey=`IFS=\> && while read -d
                  \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8989
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 8989
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          volumeMounts:
            - name: downloads
              mountPath: /data/downloads
            - name: media
              mountPath: /data/media
            - name: sonarr-config
              mountPath: /config
      volumes:
        - name: downloads
          persistentVolumeClaim:
            claimName: pvc-nfs-downloads
        - name: media
          persistentVolumeClaim:
            claimName: pvc-nfs-media
        - name: sonarr-config
          persistentVolumeClaim:
            claimName: pvc-iscsi-sonarr-config

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: radarr
  namespace: media
  labels:
    app: radarr
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: radarr
  template:
    metadata:
      labels:
        app: radarr
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: radarr
          image: linuxserver/radarr:amd64-latest
          imagePullPolicy: Always
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: "TZ"
              value: "Europe/Amsterdam"
          ports:
            - name: http
              containerPort: 7878
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /usr/bin/env
                - bash
                - -c
                - curl --fail localhost:7878/api/v3/system/status?apiKey=`IFS=\> && while read -d
                  \< E C; do if [[ $E = "ApiKey" ]]; then echo $C; fi; done < /config/config.xml`
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 7878
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 7878
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          volumeMounts:
            - name: downloads
              mountPath: /data/downloads
            - name: media
              mountPath: /data/media
            - name: radarr-config
              mountPath: /config
      volumes:
        - name: downloads
          persistentVolumeClaim:
            claimName: pvc-nfs-downloads
        - name: media
          persistentVolumeClaim:
            claimName: pvc-nfs-media
        - name: radarr-config
          persistentVolumeClaim:
            claimName: pvc-iscsi-radarr-config

---
kind: Service
apiVersion: v1
metadata:
  name: jellyfin
  namespace: media
  labels:
    app: jellyfin
spec:
  selector:
    app: jellyfin
  type: ClusterIP
  ports:
    - name: http
      port: 8096
      protocol: TCP
      targetPort: http

---
kind: Service
apiVersion: v1
metadata:
  name: prowlarr
  namespace: media
  labels:
    app: prowlarr
spec:
  selector:
    app: prowlarr
  type: ClusterIP
  ports:
    - port: 9696
      targetPort: http
      protocol: TCP
      name: http

---
kind: Service
apiVersion: v1
metadata:
  name: bazarr
  namespace: media
  labels:
    app: bazarr
spec:
  selector:
    app: bazarr
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 6767
      targetPort: http

---
kind: Service
apiVersion: v1
metadata:
  name: sonarr
  namespace: media
  labels:
    app: sonarr
spec:
  selector:
    app: sonarr
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 8989
      targetPort: http

---
kind: Service
apiVersion: v1
metadata:
  name: radarr
  namespace: media
  labels:
    app: radarr
spec:
  selector:
    app: radarr
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 7878
      targetPort: http

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: jellyfin
  namespace: media
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  labels:
    app: jellyfin
spec:
  ingressClassName: nginx-private
  rules:
    - host: jellyfin.k8s.lan
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: jellyfin
                port:
                  name: http

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: prowlarr
  namespace: media
  labels:
    app: prowlarr
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
spec:
  ingressClassName: nginx-private
  rules:
    - host: prowlarr.k8s.lan
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: prowlarr
                port:
                  number: 9696

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: bazarr
  namespace: media
  labels:
    app: bazarr
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
spec:
  ingressClassName: nginx-private
  rules:
    - host: bazarr.k8s.lan
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: bazarr
                port:
                  number: 6767

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: sonarr
  namespace: media
  labels:
    app: sonarr
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
spec:
  ingressClassName: nginx-private
  rules:
    - host: sonarr.k8s.lan
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: sonarr
                port:
                  number: 8989

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: radarr
  namespace: media
  labels:
    app: radarr
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
spec:
  ingressClassName: nginx-private
  rules:
    - host: radarr.k8s.lan
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: radarr
                port:
                  number: 7878
